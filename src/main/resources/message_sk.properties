
addVertex = Pridať vrchol
addEdge = Pridať hranu
algorithmDescription = Popis algoritmu
algorithms = Algoritmy
animate = Animovať
animationSpeed = Rýchlosť animácie
automaticBeautify = Automatické skrášľovanie
backStep = Krok späť
beautify = Skrášliť
burrowsWheelerMatrix = Burrows-Wheelerova matica
bwt = Burrows-Wheelerova transformácia
bwtDecode = Inverzná Burrows-Wheelerova transformácia
bwtDecodeAlg1 = Inicializácia pola C, s dĺžkou rovnej veľkosti abecedy. Pole C je indexované znakmi abecedy aj celými \
  číslami ((C[i] = C[i-ty najmenší znak abecedy])
bwtDecodeAlg2First = Počítanie výskytu znakov, skenovaním vstupného reťazca v cykle. 
bwtDecodeAlg2Positive = i je menšie/rovné ako n - 1, vykoná sa telo cyklu.
bwtDecodeAlg2Negative = i je rovné n. Teraz je v na každej pozícií pola C uložená hodnota výskytu príslušných znakov.\
  \ Program pokračuje za cyklom
bwtDecodeAlg3 = Zvýšenie hodnoty C[L[i]] o 1
bwtDecodeAlg4 = Deklarácia premennej sum, a jej inicializácia na 0
bwtDecodeAlg5First = Vypočítanie hodnôt pola C. Pre znak c okrem najmenšieho znaku platí: C[c] = C[c-1] + výskyt c \
  v reťazci, čo je použité pri výpočte C, pomocou už vypočítaných výskytov jednotlivých znakov.
bwtDecodeAlg5Positive = i je menšie ako σ, vykoná sa telo cyklu
bwtDecodeAlg5Negative = i je rovné σ. Teraz je na každej pozícií pola C uložený súčet hodnôt výskytov menších znakov, \
  ako príslušný index
bwtDecodeAlg6 = Uloženie hodnoty i-teho prvku poľa C do dočasnej premennej
bwtDecodeAlg7 = Nastavenie hodnoty i-teho prvku poľa C na hodnotu premennej sum
bwtDecodeAlg8 = Zvýšenie hodnoty premennej sum o hodnotu premennej tmp. Teraz je hodnota premennej sum rovná súčtu \
  výskytov znakov, ktoré sú menšie/rovné ako i-ty znak abecedy.
bwtDecodeAlg9 = Inicializácia pola LF. Jeho dĺžka je rovná n (dĺžke vstupného reťazca)
bwtDecodeAlg10First = Vypočítanie hodnôt pola LF. Pre každý jeho prvok na indexe i platí, že jeho hodnota je C[L[i]] + \
  L.rank(L[i], i). Pre každé L[i] hodnotu C[L[i]] poznáme, je potrebné vypočítať iba rank. Pri prechádzaní pola od \
  začiatku pre určitý znak nachádzame postupne jeho výskyty v reťazci L. Keďže sa však hodnota L.rank(L[i], i) rovná \
  počtu doterajších výskytov, tak ak si pre každý znak tento počet pamätáme, tak vieme povedať hodnotu LF[i]. Nie je \
  nutné vytvárať nové pole na uloženie hodnoty doterajších výskytov pre každý znak, môžme na to použiť pole C, v ktorom \
  bude súčet počtu doterajších výskytov, a počet výskytov menších znakov.
bwtDecodeAlg10Positive = i je menšie ako n, vykoná sa telo cyklu
bwtDecodeAlg10Negative = i je rovné n. Teraz je pole LF naplnené podľa definície LF-mapovania.
bwtDecodeAlg11 = Nastavenie hodnoty i-teho prvku pola LF na hodnotu L[i]-teho prvku pola C
bwtDecodeAlg12 = Inkrementovanie L[i]-teho prvku pola C. Týmto sa nastaví správna hodnota pre ďalší výskyt znaku L[i]
bwtDecodeAlg13 = Inicializácia reťazca S. V tomto reťazci bude uložený výsledok inverznej Burrows-Wheelerovej \
  transformácie. Jeho dĺžka je rovná n (dĺžke vstupného reťazca)
bwtDecodeAlg14 = Nastavenie posledného znaku reťazca S na $.
bwtDecodeAlg15 = Deklarácia premennej j a jej inicializácia na 0
bwtDecodeAlg16First = Každé dva prvky v reťazcoch L, ktoré sa rovnajú, a majú j-ty výskyt vo svojich reťazcoch, tak \
  predstavujú ten istý znak, na tej istej pozícií v S. LF mapovanie predstavuje prepojenie medzi polami L a F: L[i] = \
  F[LF[i]], a L[i] a F[LF[i]] majú ten istý výskyt vo svojich reťazcoch. Táto rovnosť platí kvôli výskytu prvkov v F a \
  L na v Burrows-Wheelerovej matici. (Poznámka: pole F je zobrazené sivou, pretože nie je v skutočnosti uložené v \
  pamäti, je zobrazené len ako pomôcka pre zvizualizovanie LF mapovania)
bwtDecodeAlg16Positive = i je väčšie/rovné ako 0, vykoná sa telo cyklu
bwtDecodeAlg16Negative = i je menšie ako 0. Teraz je v reťazci S uložená výsledná hodnota inverznej transformácie
bwtDecodeAlg17 = Nastavenie i-teho znaku reťazcu S na j-ty znak reťazca L
bwtDecodeAlg18 = Zmena hodnoty premennej j pomocou LF mapovania
bwtDecodeAlgEnd1 = Koniec algoritmu. Inverzná transformácia pre reťazec
bwtDecodeAlgEnd2 = je reťazec
bwtFromSAAlg1First = Vypočítanie Burrows-Wheelerovej transformácie s použitím sufixového pola. Sufixové pole sú \
  usporiadané sufixy, BWT matica je zložená z usporiadaných rotácií. Z toho platí rovnosť S[SA[i]] = F[i]. Z toho, že \
  riadky BWT sú zložené z rotácií platí, že L[i] je hneď pred F[i], alebo je to posledný a prvý znak. Pomocou tohto \
  vieme urobiť BWT z SA.
bwtFromSAAlg1Positive = i je menšie ako n, vykoná sa telo cyklu
bwtFromSAAlg1Negative = i je rovné n. Teraz je v poli BWT uložený reťazec transformácie
bwtFromSAAlg2True = S[SA[i]] nie je nultým znakom, vieme nájsť znak, ktorý je pred ním
bwtFromSAAlg2False = S[SA[i]] je nultým znakom, v rotácií je pred ním ukončovací znak
bwtFromSAAlg3 = Pridanie znaku pred S[SA[i]] (teda S[SA[i] - 1]) do reťazca BWT
bwtFromSAAlg5 = Pridanie ukončovacieho znaku do reťazca BWT
bwtFromSAAlgEnd = Koniec algoritmu. Výsledný reťazec transformácie je
bwtSearchStart = n označuje dĺžku reťazca, a m dĺžku vzoru. Sivá časť matice nie je uložené v pamäti, slúži iba ako \
  pomôcka pre vizualizáciu
bwtSearchAlg1 = Deklarácia premennej top, a jej inicializácia na 0. Táto premenná označuje začiatok intervalu v \
  sufixovom poli, v ktorom sa môže nachádzať vzor. Používame polootvorené intervaly, pozícia top patrí intervalu.
bwtSearchAlg2 = Deklarácia premennej bottom, a jej inicializácia na n (dĺžku reťazca). Táto premenná označuje koniec \
  intervalu v sufixovom poli, v ktorom sa môže nachádzať vzor. Používame polootvorené intervaly, a pozícia bottom už \
  nepatrí danému intervalu
bwtSearchAlg3First = Prechádzanie reťazcom vzoru od konca, pre každý znak zistíme, kde môže začínať daný sufix vzoru. \
  Keďže riadky Burrows-Wheelerovej matice sú rotácie, potrebujeme zistiť, ktoré pozície v poslednom stĺpci matice (L) \
  môžu byť pokračovaním vzoru. Tieto môžu byť iba v riadkoch, kde už bola nájdená predchádzajúca časť vzoru, a teda \
  iba na tých, ktoré sú zvýraznené. Zistíme, aké majú indexy znaky z daného intervalu, ktoré sú rovnaké ako od konca \
  i-ty znak vzoru, a z vlastností LF-mapovania potom vieme, na akom novom intervale sa nachádza predĺžený sufix vzoru.
bwtSearchAlg3Positive = i je väčšie/rovné ako 0, vykoná sa telo cyklu. V tele cyklu sa zistia hodnoty indexov \
  nasledujúcich znakov vzoru v reťazci L, ktoré sú na zvýraznenom intervale
bwtSearchAlg3Negative = i je menšie ako 0. Teraz premenné top a bottom označujú interval, na ktorom sa nachádzajú v \
  sufixovom poli pozície začiatkov výskytov vzoru v reťazci
bwtSearchAlg4 = Načítanie ďalšieho znaku zo vzoru
bwtSearchAlg5 = Zmena hodnoty premennej top, pomocou nového pridaného znaku vzoru
bwtSearchAlg6 = Zmena hodnoty premennej bottom, pomocou nového pridaného znaku vzoru
bwtSearchAlg7Positive = Premenná top je väčšia rovná ako premenné bottom. Keďže ohraničujú polootvorený interval, tak \
  tento musí byť teraz prázdny, a neexistuje výskyt vzoru v reťazci
bwtSearchAlg7Negative = Premenná top je menšia ako bottom, interval možných riešení je neprázdny, a môžme pokračovať v \
  algoritme. V Burrows-Wheelerovej matici sú zvýraznené znaky, ktoré ukazujú na doteraz sa zhodujúcu časť vzoru v \
  reťazci
bwtSearchAlgEndNegative = Koniec algoritmu, nenašiel sa žiaden výskyt
bwtSearchAlgEndPositiveSg = Koniec algoritmu. Výskyt vzoru je na pozícií
bwtSearchAlgEndPositivePl = Koniec algoritmu. Výskyt vzoru je na pozíciach:
bwtIntroductionDescription =  Definícia Burrows-Wheelerovej transformácie
BWTWithLF = BWT s LF-mapovaním
BWTGeneralAlgorithmEnd = Po usporiadaní všetkých rotácií, posledný stĺpec, označovaný L (červený), je výstupom transformácie. \
  V tomto prípade
BWTGeneralAlgorithmStart = V prvom kroku sa vytvoria všetky rotácie (cyklické posuny) vstupného reťazca, ktoré sa uložia \
  do matice. V ďalšom kroku sa tieto rotácie lexikograficky usporiadajú
BWTMatrix = Burrows-Wheelerove matica
BWTPatternMatching = Hľadanie vzoru v reťazci použitím BWT
BWTPatternMatchingDescription = Algoritmus pre hľadanie vzoru v reťazci, na základe FM-indexu
BWTUsingSA = BWT s využitím sufixových polí
BWTUsingSADescription = Algoritmus pre vykonanie Burrows-Wheelerovej transformácie s použitím jej prepojenia so sufixovými poľami
centre = Vycentrovať
checkWG = ?(Test for Wheeler)
compute = Vypočítať
connectionWithWG = Prepojenie s Wheelerovými grafmi
createGraph = Vytvoriť graf
createWGGraphDescription = Vytvorenie grafu pomocou pridávania vrcholov a hrán, testovanie, či je daný graf Wheelerov graf, \
  a možnosť odovzdať graf pre iné algoritmy
decode = Dekódovať
definition = Definícia
description = Popis
english = Angličtina
example1 = Príklad 1
example2 = Príklad 2
example3 = Príklad 3
example4 = Príklad 4
edgeValue = Hodnota hrany
graph = Graf
inputText = Zadajte text
inputTextForAlgorithm = Zadajte text pre algoritmus
introduction = Úvod
inverseBWT = Inverzia BWT
inverseBWTDescription = Algoritmus pre inverznú Burrows-Wheelerovu transformáciu
language = Jazyk
memory = Pamäť
nextStep = Ďalší krok
pattern = Vzor
patternMatching = Hľadanie vzoru
pseudocode = Pseudokód
retransform = Retransformovať
retransformation = Retransformácia
retransformationBWTDescription = Algoritmus pre retransformovanie Burrows-Wheelerovej transformácie
retry = Znova
retryWithSameString = Vyskúšať s tým istým reťazcom
returnToWG = Návrat na menu
returnToBWT = Návrat na menu
sa = Sufixové pole
SAGeneralAlgorithmEnd1 = V poslednom stĺpci sú usporiadané sufixy. Každý sufix je jednoznačne identifikovateľný pomocou \
  jeho začiatku. Stačí preto uložiť iba začiatky týchto sufixov, a týmto dostaneme sufixové pole SA, zobrazené v treťom \
  stĺpci. V tomto prípade
SAGeneralAlgorithmEnd2 = So sufixovými poľami je spojené aj pole LCP, čo je pole dĺžok najdlhších spoločných prefixov \
  (Longest Common Prefix). I-ty prvok LCP-pole má hodnotu rovnú dĺžke najdlhšieho spoločného prefixu (i - 1)-vého a \
  i-teho prvku sufixového poľa. V tomto prípade
SAGeneralAlgorithmStart = V prvom kroku sa vytvoria všetky sufixy vstupného reťazca. V ďalšom kroku sa tieto sufixy \
  lexikograficky usporiadajú
searchInGraph = Vyhľadať v grafe
setGraphExample = Nastaviť príklad grafu
slovak = Slovenčina
sort = Usporiadať
start = Začať
startAlgorithm = Začať algoritmus
string = Reťazec
succinctRepresentation = Úsporná reprezentácia
test = Test
transformGraph = Transformovať graf
tunnelGraph = Tunelovať graf
tunneling = Tunelovanie
tunnelingDescription = Algoritmus pre tunelovanie Wheelerových grafov
vertex = Vrchol
vertexFrom = Vrchol z
vertexTo = Vrchol do
wg = Wheelerov graf

WGBackwardStepsAlg1 = Zistenie pozície hrany s posledným znakom reťazca
WGBackwardStepsAlg2 = Deklarácia premennej offset, a jej inicializácia na hodnotu 0. V tejto premennej bude uložené \
  relatívne poradie hrany pri vstupe do tunela, ktoré bude potom použité pri výstupe z tunela, na zistenie správneho \
  pokračovania cesty
WGBackwardStepsAlg3First = V tomto cykle sa postupne zisťujú hrany, na ktorých je uložený pôvodný reťazec. Pri \
  prechádzaní emulujeme spätný krok, použitím LF-mapovania, a tiež si pamätáme, či sme vošli do nejakého (jedného) tunela.
WGBackwardStepsAlg3Positive = Hodnota premennej k je menej, ako dĺžka reťazca. Vykoná sa telo cyklu
WGBackwardStepsAlg3Negative = Hodnota premennej k je rovná dĺžke reťazca. Teraz je v premennej SR uložený reverz \
  pôvodného reťazca uloženého v danom Wheelerovom grafe
WGBackwardStepsAlg4 = Uloženie označenia hrany, na ktorej sa práve nachádzame do reťazca SR
WGBackwardStepsAlg5 = Použitie LF mapovania na zistenie, akú pozíciu má hrana v poli in (a v reťazci F)
WGBackwardStepsAlg6 = Zistenie, akú hodnotu má vrchol, do ktorého vchádza hrana na pozícií i
WGBackwardStepsAlg7Positive = Keďže vrchol, do ktorého vstupujeme má viac vstupných hrán, znamená to, že sme narazili \
  na vstup do tunela
WGBackwardStepsAlg7Negative = Daný vrchol neoznačuje začiatok tunela
WGBackwardStepsAlg8 = Zistenie relatívnej pozície hrany, vzhľadom ku zvyšným hranám vstupujúcich do tunela
WGBackwardStepsAlg9 = Zistenie pozície prvej výstupnej hrany vrchola, na ktorom sa práve nachádzame
WGBackwardStepsAlg10Positive = Daný vrchol má viacero výstupných hrán, čo znamená, že sme na konci tunela, a je \
  potrebné vyjsť tou istou hranou v relatívnom poradí, ktorou sme do daného tunela vošli
WGBackwardStepsAlg10Negative = Daný vrchol má práve jednu výstupnú hranu, nie je to výstup z tunela
WGBackwardStepsAlg11 = Pripočítanie relatívneho poradia hrany, ktorou sme vstúpili do tunela. Na pozícií i je teraz \
  uložené správna hodnota výstupnej cesty
WGBackwardStepsAlg12 = Nastavenie premennej offset na 0

WGFromBWT = BWT reprezentovaná Wheelerovým grafom
WGFromBWTAlgPart1 = Pridáva sa nová hrana, ktorá vychádza z vrcholu i =
WGFromBWTAlgPart2 = , a vchádza do vrcholu LF[i] =
WGFromBWTAlgPart3 = , ktorá ma označenie L[i] =
WGFromBWTEnd = Daný Wheelerov graf reprezentuje vloženú BWT. Môžte ho skúsiť transformovať, získať späť vstupný reťazec, \
  prípadne ho tunelovať.
WGFromBWTDescription = Vytvorenie Wheelerovho grafu, ktorý bude reprezentovať Burrows-Wheelerovu transformáciu
WGFromBWTPreStart = Vložte reťazec, pre ktorý bude vytvorená Burrows-Wheelerova transformácia. Potom bude vytvorený \
  Wheelerov graf, ktorý bude reprezentovať danú transformáciu
WGFromBWTStart = Wheelerov graf, reprezentujúci Burrows-Wheelerovu transformáciu s dĺžkou n, má n vrcholov. Každý vrchol \
  má práve jednu vstupnú, a jednu výstupnú hranu. Pre každú hranu platí, že ak vychádza z vrchola i, tak vchádza do \
  vrchola LF[i] (pole LF je LF-mapovanie), a je označená znakom L[i]. Budeme pridávať hrany postupne, v poradí \
  LF-mapovanie (teda vložené hrany budú mať vytvárať reverz vstupného reťazca).
WGTunneling = Tunelovanie Wheelerovho grafu
WGTunnelingNegative = V tomto grafe sme nenašli žiaden prefixový interval. Môžete vyskúšať niektorý z príkladov
WGTunnelingPositive = Cesty najdlhšieho prefixového intervalu, ktorý sme našli v danom grafe, sú označené modrou, a \
  červenou farbou. Algoritmus tieto cesty zlúči v dvoch častiach. V prvej zlúči po dvojiciach všetky vrcholy, a tým \
  vzniknú medzi nimi násobné hrany. V druhej časti tieto násobné hrany zlúči do jednej. V premennej beg je uložená \
  hodnota prvého vrcholu prvej cesty prefixového intervalu, v premennej end je hodnota prvého vrcholu poslednej \
  (druhej) cesty. Premenná w označuje šírku prefixového intervalu, teda dĺžku každej z jeho ciest
WGTunnelingAlg1 = Inicializácia premennej h, ktorá označuje výšku daného intervalu, teda počet ciest, v našom prípade 2
WGTunnelingAlg2 = Inicializácia premennej x, ktorá označuje hodnotu prvého vrcholu v prvej ceste prefixového intervalu. \
  Počas algoritmu v ňej budú postupne uložené hodnoty všetkých vrcholov z prvej cesty, po ktorých sa bude presúvať \
  pomocou LF-mapovania
WGTunnelingAlg3First = V tomto cykle sa postupne spájajú vrcholy prefixového intervalu. Zmena 1-tky na 0 v poli in na \
  i-tej pozícií znamená, že i-ta hrana vstupuje do vrcholu s hodnotou o jedna menšou ako predtým. Tiež sa posunú všetky \
  hrany na vyšších pozíciach, a budú vstupovať do vrcholov s hodnotou o jedna menšou. Analogicky pri zmene 1-tky na 0 \
  v poli out sa menia výstupné vrcholy hrán. Ak sa zmení hodnota na oboch miestach, potom príslušný vrchol nemá \
  žiadne hrany, a môžme ho vylúčiť.
WGTunnelingAlg3Positive = Hodnota premennej k, je menšia ako w - 1, vykoná sa telo cyklu
WGTunnelingAlg3Negative = Hodnota premennej k je rovná w - 1, program pokračuje za cyklom. Teraz je sú spojené vrcholy \
  ciest prefixového intervalu, a vznikli násobné hrany medzi nimi. V ďalšej časti tieto hrany zlúčime
WGTunnelingAlg4First = V tomto krok sa nastaví hodnota v in[x + 1] na 0, čo znamená, že sa posunú koncové pozície \
  niektorých hrán. Kvôli vizualizácií zmeníme aj hodnotu v out[x + 1] na 0 (zvýraznená pozícia v poli out), a po tejto \
  časti programu na danú pozíciu vrátime pôvodnú hodnotu. Znamená to, že sme zlúčili prvé vrcholy intervalu
WGTunnelingAlg4Other = V tomto kroku sa nastaví zmení hodnota v in[x + 1] na 0, čo znamená, že sa "zlúčili" k-te \
  vrcholy v prefixovom intervale. Túto zmenu aj ukážeme na grafe.
WGTunnelingAlg5 = Zmena hodnoty premennej x, pomocou LF mapovania. Týmto v nej bude uložená hodnota ďalšieho vrcholu \
  z prvej cesty prefixového intervalu
WGTunnelingAlg6 = Nastavenie hodnoty v out[x + 1] na 0, čo znamená, že sa posunú začiatočné pozície niektorých hrán. \
  Túto zmenu nezobrazujeme na grafe, urobíme tak až pri ďalšej zmene v poli in.
WGTunnelingAlg7 = Inicializácia premennej i. Tiež, kvôli vizualizácii, nastavíme hodnotu v poli in na 0, tak, aby sa \
  spojili aj posledné vrcholy prefixového intervalu (dané hodnota je zvýraznená)
WGTunnelingAlg8 = Inicializácia premennej j. Pomocou týchto premenných sa budú posúvať hodnoty v poliach in,out, a \
  reťazci L
WGTunnelingAlg9First = V tomto cykle sa zlúčia viacnásobné hrany, ktoré vznikli v predchádzajúcej časti. Pri tomto \
  procese nie je možné správne vizualizovať zmeny v grafe, a preto sa budú meniť iba hodnoty v poliach in, out, a v \
  reťazci L. Vrátili sme pôvodné hodnoty v poliach in a out, ktoré boli vykonané iba kvôli vizualizácii.
WGTunnelingAlg9Positive = k je menšie ako veľkosť počet hrán, vykoná sa telo cyklu
WGTunnelingAlg9Negative = k je rovné počtu hrán, program pokračuje za cyklom. Pri skrátení polí in a out, a reťazca L \
  vznikne úsporná reprezentácia ztunelovaného grafu. Toto sa vykoná na ďalších riadkoch
WGTunnelingAlg10Positive = Hodnota pola in na pozícií k je 1
WGTunnelingAlg10Negative = Hodnota pola in na pozícií k je 0
WGTunnelingAlg11 = Nastavenie hodnoty pola out na pozícií i, na hodnotu na pozícií k
WGTunnelingAlg12 = Nastavenie znaku reťazca L na pozícií i, na znak na pozícií k
WGTunnelingAlg13 = Inkrementovanie hodnoty premennej i
WGTunnelingAlg14Positive = Hodnota pola out na pozícií k je 1
WGTunnelingAlg14Negative = Hodnota pola out na pozícií k je 0
WGTunnelingAlg15 = Nastavenie hodnoty pola out na pozícií j, na hodnotu na pozícií k
WGTunnelingAlg16 = Inkremetovanie hodnoty premennej j
WGTunnelingAlg17 = Skrátenie reťazca L na dĺžku i
WGTunnelingAlg18 = Skrátenie pola out na dĺžku i + 1
WGTunnelingAlg19 = Nastavenie posledného prvku pola out na 1
WGTunnelingAlg20 = Skrátenie pola in na dĺžku i + 1
WGTunnelingAlg21 = Nastavenie posledného prvku pola in na 1
WGTunnelingEnd = A takto vyzerá stunelovaný graf pre daný vstup





